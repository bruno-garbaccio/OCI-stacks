---
- name: create prometheus group on compute
  become: true
  group:
    name: prometheus
    state: present
    system: yes
  when: ( not destroy|bool ) and ('compute' in group_names)

- name: create prometheus user on compute
  become: true
  user:
    name: prometheus
    comment: "prometheus user"
    group: prometheus
  when: ( not destroy|bool ) and ('compute' in group_names)

- name: Create /etc/prometheus directory
  become: true
  file:
    path: "/var/lib/prometheus/node_exporter"
    state: directory
    owner: 'prometheus'
    group: 'prometheus'
  when: ( not destroy|bool ) and ('compute' in group_names)

- name: Download node_exporter {{ node_exporter }}
  become: prometheus
  get_url:
    url: https://github.com/prometheus/node_exporter/releases/download/v{{ node_exporter }}/node_exporter-{{ node_exporter }}.linux-amd64.tar.gz
    dest: /tmp/node_exporter-{{ node_exporter }}.linux-amd64.tar.gz 
  when: ( not destroy|bool ) and ('compute' in group_names)

- name: Extract node_exporter {{ node_exporter }}.linux-amd64.tar.gz into /var/lib/prometheus/node_exporter/
  become: true
  unarchive:
    src: /tmp/node_exporter-{{ node_exporter }}.linux-amd64.tar.gz 
    dest: /var/lib/prometheus/node_exporter/
    extra_opts: [--strip-components=1]
    remote_src: yes    
  when: ( not destroy|bool ) and ('compute' in group_names)

- name: Recursively change ownership of a /var/lib/prometheus/node_exporter/
  become: true
  file:
    path: /var/lib/prometheus/node_exporter
    state: directory
    recurse: yes
    owner: prometheus
    group: prometheus 
  when: ( not destroy|bool ) and ('compute' in group_names)

- name: Create a symbolic link node_exporter
  become: true
  file:
    src: /var/lib/prometheus/node_exporter/node_exporter
    dest: /usr/bin/node_exporter
    state: link     
  when: ( not destroy|bool ) and ('compute' in group_names)

- name: Configure node_exporter service
  become: true
  copy:
    src: 'node_exporter.service'
    dest: '/usr/lib/systemd/system/node_exporter.service' 
  when: ( not destroy|bool ) and ('compute' in group_names)  


- name: Run command deactivate selinux for node_exporter, chcon  
  become: true
  command: chcon --reference=/bin/less /usr/bin/node_exporter
  when: ( not destroy|bool ) and ('compute' in group_names)

- name: Run command deactivate selinux for node_exporter, semanage  
  become: true
  command: semanage fcontext -a -t bin_t "/usr/bin/node_exporter"
  register: node_exporter
  failed_when: "node_exporter.rc != 0 and 'already defined' not in node_exporter.stderr"
  when: ( not destroy|bool ) and ('compute' in group_names)

- name: start node_exporter.service
  become: true
  service:
    name: node_exporter.service
    state: restarted
    enabled: true
  when: ( not destroy|bool ) and ('compute' in group_names) 




- name: Install nvidia-gpu-exporter {{ nvidia-gpu-exporter }}
  become: true
  yum:
    name: https://github.com/utkuozdemir/nvidia_gpu_exporter/releases/download/v1.2.0/nvidia-gpu-exporter_1.2.0_linux_amd64.rpm
    state: present
    disable_gpg_check: true
  when: ( not destroy|bool ) and ('compute' in group_names) and ('GPU' in shape) and ( not enroot|bool )

- name: Configure gpu_exporter service
  become: true
  copy:
    src: 'gpu_exporter.service'
    dest: '/usr/lib/systemd/system/gpu_exporter.service' 
  when: ( not destroy|bool ) and ('compute' in group_names) and ('GPU' in shape) and ( not enroot|bool )

- name: Run command deactivate selinux for nvidia_gpu_exporter, chcon  
  become: true
  command: chcon --reference=/bin/less /usr/bin/nvidia_gpu_exporter
  when: ( not destroy|bool ) and ('compute' in group_names) and ('GPU' in shape) and ( not enroot|bool )

- name: Run command deactivate selinux for nvidia_gpu_exporter, semanage  
  become: true
  command: semanage fcontext -a -t bin_t "/usr/bin/nvidia_gpu_exporter"
  register: node_exporter
  failed_when: "node_exporter.rc != 0 and 'already defined' not in node_exporter.stderr"
  when: ( not destroy|bool ) and ('compute' in group_names) and ('GPU' in shape) and ( not enroot|bool )

- name: start nvidia_gpu_exporter.service
  become: true
  service:
    name: nvidia_gpu_exporter
    state: restarted
    enabled: true
  when: ( not destroy|bool ) and ('compute' in group_names) and ('GPU' in shape) and ( not enroot|bool )


- name: Install DCGM-Exporter from NVIDIA
  become: true
  command: docker run -d --gpus all --rm -p {{ gpu_ports }}:9400 nvcr.io/nvidia/k8s/dcgm-exporter:3.1.7-3.1.4-ubuntu20.04
  when: ( not destroy|bool ) and ('compute' in group_names) and ('GPU' in shape) and ( enroot|bool )


# - name: Set "running" label to "no" in /etc/prometheus/prometheus.yml 
#   become: true
#   replace:
#     path: /etc/prometheus/prometheus.yml 
#     regexp: 'yes'
#     replace: 'no'
#   delegate_to: "{{ groups['monitoring_server'][0] }}" 
#   when: ('bastion' in group_names)    

# - name: restart prometheus.service to update running label
#   become: true
#   service:
#     name: prometheus.service
#     state: restarted
#     enabled: true 
#   delegate_to: "{{ groups['monitoring_server'][0] }}" 
#   when: ('bastion' in group_names) 




- name: Get nodes information
  shell: /usr/bin/sinfo -o "%o %f"
  register: sinfo
  when: ('bastion' in group_names)

- name: Print return information from the previous task
  debug:
    msg: "{{ sinfo.stdout.split()[2:] }}"
  when: ('bastion' in group_names)


- name: Configure prometheus jobs in prometheus.yml
  become: true
  template:
    src: 'prometheus.yml.j2'
    dest: '/etc/prometheus/prometheus.yml'
    owner: prometheus
    group: prometheus 
  delegate_to: "{{ groups['monitoring_server'][0] }}"
  when: ('bastion' in group_names)

- name: restart prometheus.service
  become: true
  service:
    name: prometheus.service
    state: restarted
    enabled: true 
  delegate_to: "{{ groups['monitoring_server'][0] }}" 
  when: ('bastion' in group_names)  

#- name: Get prometheus information for cpu instances
#  shell: curl -g 'http://{{ groups['monitoring_server'][0] }}:9090/api/v1/series?' --data-urlencode 'match[]=up' --data-urlencode 'match[]=process_start_time_seconds{job="node_exporter"}' | jq -r ".data[]" | jq -r ".instance"
#  register: cpu_instances
#  when: ('bastion' in group_names)

#- name: Print return information from curl command
#  debug:
#    msg: "{{ cpu_instances.stdout.split() }}"
#  when: ('bastion' in group_names)


#- name: split on element
#  shell: curl -X POST -g 'http://{{ groups['monitoring_server'][0] }}:9090/api/v1/admin/tsdb/delete_series?match[]=up&match[]={instance="{{ item }}"}'
##  debug:
##    msg: "{{ item.split(':')[0] }} is in sinfo"
#  loop: "{{ cpu_instances.stdout.split() }}"
#  when: ('bastion' in group_names) and (sinfo.stdout.split()[2:] is not search(item.split(':')[0]))
  

# - name: Clean when running is no
#   shell: curl -X POST -g 'http://{{ groups['monitoring_server'][0] }}:9090/api/v1/admin/tsdb/delete_series?match[]=up&match[]={running="no"}'
#   when: ('bastion' in group_names)

# - name: Clean all 
#   shell: curl -X POST -g 'http://{{ groups['monitoring_server'][0] }}:9090/api/v1/admin/tsdb/clean_tombstones'
#   when: ('bastion' in group_names) 
   